/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.10.1-master-703f2c8
 */
function MdProgressLinearDirective(r,e,a){function n(r,e,a){return r.attr("aria-valuemin",0),r.attr("aria-valuemax",100),r.attr("role","progressbar"),t}function t(n,t,o){a(t);var s=t[0].querySelector(".md-bar1").style,d=t[0].querySelector(".md-bar2").style,m=angular.element(t[0].querySelector(".md-container"));o.$observe("value",function(r){if("query"!=o.mdMode){var a=i(r);t.attr("aria-valuenow",a),d[e.CSS.TRANSFORM]=transforms[a]}}),o.$observe("mdBufferValue",function(r){s[e.CSS.TRANSFORM]=transforms[i(r)]}),r(function(){m.addClass("md-ready")})}function i(r){return r>100?100:0>r?0:Math.ceil(r||0)}return{restrict:"E",template:'<div class="md-container"><div class="md-dashed"></div><div class="md-bar md-bar1"></div><div class="md-bar md-bar2"></div></div>',compile:n}}goog.provide("ng.material.components.progressLinear"),goog.require("ng.material.core"),angular.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",MdProgressLinearDirective),MdProgressLinearDirective.$inject=["$$rAF","$mdConstant","$mdTheming"];var transforms=function(){function r(r){var e=r/100,a=(r-100)/2;return"translateX("+a.toString()+"%) scale("+e.toString()+", 1)"}for(var e=new Array(101),a=0;101>a;a++)e[a]=r(a);return e}();ng.material.components.progressLinear=angular.module("material.components.progressLinear");